# Consistent Microservices with Go and Protobuf

Murilo Santana
Nov 2020
@mvrilo

## Overview

- protobuf
- microservice architecture
- grpc vs rest
- code generation
- go

## Intro to Consistency

- schema oriented
- backwards compatibility aware
- carefully versioned
- highly documented
- programming language neutral*

## Protobuf

> Protobuf, or Protocol Buffers, are Google's language-neutral, platform-neutral, extensible mechanism for serializing structured data – think XML, but smaller, faster, and simpler.

[https://developers.google.com/protocol-buffers]()

<br>

> Protocol Buffers (Protobuf) is a method of serializing structured data. It is useful in developing programs to communicate with each other over a wire or for storing data. The method involves an interface description language that describes the structure of some data and a program that generates source code from that description for generating or parsing a stream of bytes that represents the structured data.

[https://en.wikipedia.org/wiki/Protocol_Buffers]()


## Exemple (hello.proto)

<br>


```proto
syntax="proto3";

package hello.v1;

message Hello {
  string name = 1;
}
```

## Json


### Subsection {#anchor}

- bullets
- more bullets
- a bullet continued
  on the next line

#### Sub-subsection

Some More text

	Preformatted text (code block)
	is indented (by one tab, or four spaces)

Further Text, including command invocations.

## Section 2: Example formatting {#fmt}

Formatting:

_italic_
// A comment that is completely ignored.
: Speaker notes.
**bold**
`program`
Markup—_especially italic text_—can easily be overused.
_Why use scoped\_ptr_? Use plain **\*ptr** instead.

Visit [the Go home page](https://golang.org/).
